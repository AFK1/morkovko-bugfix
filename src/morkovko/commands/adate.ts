import { EmbedBuilder } from 'discord.js';
import { noUserEmbed, setEmbedAuthor, getTimeFromMins } from './helpers';
import * as moment from 'moment';

export default {
  name: '—Å–≤–∏–¥–∞–Ω–∏–µ',
  run: (message, args, service, isSlash) => {
    const embedSuccess = new EmbedBuilder().setColor('#f97a50');
    const embedError = new EmbedBuilder().setColor('#f97a50');
    const user = isSlash ? message.user : message.author;
    const send = async (a) => {
      if (isSlash) await message.reply(a).catch(() => console.log(''));
      else message.channel.send(a).catch(() => console.log(''));
    };
    service.checkUser(user.id).then((res) => {
      if (res.status === 200) {
        const player = res.player;
        const userFriends = player.relations;
        const d1 = moment(player.lastADate);
        const d2 = moment(new Date());
        const diff = d2.diff(d1, 'minutes');
        const needDiff = 1440;
        if (userFriends && userFriends.length > 0) {
          if (diff >= needDiff) {
            const successChance = Math.random() * 100;
            let isSuccess = false;
            if (successChance >= 10) isSuccess = true;
            const friend =
              userFriends[Math.floor(Math.random() * userFriends.length)];
            if (!isSuccess) player.carrotCount -= 1;

            const rels = player.relations.find(
              (f) => f.userId === friend.userId,
            );
            if (isSuccess) {
              rels.level += 10;
            } else {
              rels.level -= 30;
            }
            player.lastADate = moment(new Date()).toDate();

            service.savePlayer(player).then((resSave) => {
              if (resSave.status === 200) {
                service.checkUser(friend.userId).then((resFriend) => {
                  const friendModel = resFriend.player;
                  if (!isSuccess) friendModel.carrotCount -= 1;
                  if (resFriend.status === 200) {
                    const relsF = friendModel.relations.find(
                      (f) => f.userId === player.userId,
                    );
                    if (isSuccess) {
                      relsF.level += 10;
                    } else {
                      relsF.level -= 30;
                    }
                    service.savePlayer(friendModel).then((resSave) => {
                      if (resSave.status === 200) {
                        let noCarrot = '';
                        let friendNoCarrot = '';
                        if (player.carrotCount < 0) {
                          noCarrot =
                            ' —Ç.–∫. —É —Ç–µ–±—è –Ω–µ –±—ã–ª–æ –º–æ—Ä–∫–æ–≤–∫–∏, —Ç—ã –≤–∑—è–ª –∫—Ä–µ–¥–∏—Ç,';
                        }
                        if (friendModel.carrotCount < 0) {
                          friendNoCarrot =
                            '–£ —Ç–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ –Ω–µ –±—ã–ª–æ –º–æ—Ä–∫–æ–≤–∫–∏, –æ–Ω –≤–∑—è–ª –∫—Ä–µ–¥–∏—Ç.';
                        }

                        let result = '';

                        if (isSuccess) {
                          result = `–≤–∞—à–µ —Å–≤–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ 10 –æ—á–∫–æ–≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–π.`;
                        } else {
                          result = `–≤–∞—à–µ —Å–≤–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É–∂–∞—Å–Ω–æ, –≤—ã —Ç–∞–∫ –∂–µ –ø–æ—Ç–µ—Ä—è–ª–∏ –ø–æ 30 –æ—á–∫–æ–≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–π.`;
                        }

                        embedSuccess.setDescription(
                          `–¢—ã —Å—Ö–æ–¥–∏–ª –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ —Å <@${friendModel.userId}>, ${
                            !isSuccess ? '–≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –ø–æ –æ–¥–Ω–æ–π ü•ï,' : ''
                          }${!isSuccess ? noCarrot : ''} ${result} ${
                            !isSuccess ? friendNoCarrot : ''
                          }`,
                        );
                        send({
                          embeds: [setEmbedAuthor(embedSuccess, user)],
                        });
                      } else {
                        embedError.setDescription(
                          `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`,
                        );
                        send({
                          embeds: [setEmbedAuthor(embedError, user)],
                        });
                      }
                    });
                  } else {
                    embedError.setDescription(
                      `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`,
                    );
                    send({
                      embeds: [setEmbedAuthor(embedError, user)],
                    });
                  }
                });
              } else {
                embedError.setDescription(
                  `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`,
                );
                send({
                  embeds: [setEmbedAuthor(embedError, user)],
                });
              }
            });
          } else {
            embedError.setDescription(
              `–¢—ã —Å–º–æ–∂–µ—à—å —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ ${getTimeFromMins(
                needDiff - diff,
              )}!`,
            );
            send({
              embeds: [setEmbedAuthor(embedError, user)],
            });
          }
        } else {
          embedError.setDescription(
            `–£ —Ç–µ–±—è –Ω–µ—Ç –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ.`,
          );
          send({
            embeds: [setEmbedAuthor(embedError, user)],
          });
        }
      } else {
        send({ embeds: [noUserEmbed(user)] });
      }
    });
  },
};
