import { EmbedBuilder } from 'discord.js';
import { noUserEmbed, setEmbedAuthor } from './helpers';

export default {
  name: '–∫–∞—Ö–∏–Ω–æ',
  run: (message, args, service, isSlash) => {
    const embedSuccess = new EmbedBuilder().setColor('#f97a50');
    const embedError = new EmbedBuilder().setColor('#f97a50');
    const user = isSlash ? message.user : message.author;
    const send = async (a) => {
      if (isSlash) await message.reply(a).catch(() => console.log(''));
      else message.channel.send(a).catch(() => console.log(''));
    };
    service.checkUser(user.id).then((res) => {
      if (res.status === 200) {
        const player = res.player;
        const count = isSlash
          ? Math.abs(parseInt(args.getString('–∫–æ–ª-–≤–æ')))
          : Math.abs(parseInt(args[0]));
        if (count && player.carrotCount >= count) {
          let win = false
          if(Math.floor(Math.random() * 6) > 5){
            win = true;
            player.carrotCount += count * 5;
          } else {
            win = false;
            player.carrotCount -= count;
          }
          service.savePlayer(player).then((resSave) => {
            if (resSave.status === 200) {
              if (win){
                embedSuccess.setDescription(
                  `–¢—ã –≤—ã–∏–≥—Ä–∞–ª! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è **${player.carrotCount}** ü•ï!`,
                );
              } else {
                embedSuccess.setDescription(
                  `–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.`,
                );
              }
              send({
                embeds: [setEmbedAuthor(embedSuccess, user)],
              });
            } else {
              embedError.setDescription(
                `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`,
              );
              send({
                embeds: [setEmbedAuthor(embedError, user)],
              });
            }
          });
        } else {
          if (!count) {
            embedError.setDescription(`–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –∫–æ–ª-–≤–æ ü•ï!`);
          } else {
            embedError.setDescription(
              `–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${count - player.carrotCount}ü•ï!`,
            );
          }
          send({
            embeds: [setEmbedAuthor(embedError, user)],
          });
        }
      } else {
        send({ embeds: [noUserEmbed(user)] });
      }
    });
  },
};
